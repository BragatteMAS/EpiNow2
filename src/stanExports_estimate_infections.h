// Generated by rstantools.  Do not edit by hand.

/*
    EpiNow2 is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    EpiNow2 is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with EpiNow2.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_estimate_infections_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_estimate_infections");
    reader.add_event(325, 323, "end", "model_estimate_infections");
    return reader;
}
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
convolve(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& cases,
             const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& pdf,
             const int& direction, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 4;
        int t(0);
        (void) t;  // dummy to suppress unused var warning
        stan::math::fill(t, std::numeric_limits<int>::min());
        stan::math::assign(t,num_elements(cases));
        current_statement_begin__ = 5;
        validate_non_negative_index("delay_mat", "t", t);
        validate_non_negative_index("delay_mat", "t", t);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> delay_mat(t, t);
        stan::math::initialize(delay_mat, DUMMY_VAR__);
        stan::math::fill(delay_mat, DUMMY_VAR__);
        stan::math::assign(delay_mat,rep_matrix(0, t, t));
        current_statement_begin__ = 6;
        int max_pdf(0);
        (void) max_pdf;  // dummy to suppress unused var warning
        stan::math::fill(max_pdf, std::numeric_limits<int>::min());
        stan::math::assign(max_pdf,num_elements(pdf));
        current_statement_begin__ = 7;
        validate_non_negative_index("row_pdf", "max_pdf", max_pdf);
        Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> row_pdf(max_pdf);
        stan::math::initialize(row_pdf, DUMMY_VAR__);
        stan::math::fill(row_pdf, DUMMY_VAR__);
        stan::math::assign(row_pdf,to_row_vector(pdf));
        current_statement_begin__ = 8;
        validate_non_negative_index("convolved_cases", "t", t);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> convolved_cases(t);
        stan::math::initialize(convolved_cases, DUMMY_VAR__);
        stan::math::fill(convolved_cases, DUMMY_VAR__);
        current_statement_begin__ = 10;
        for (int s = 1; s <= t; ++s) {
            current_statement_begin__ = 11;
            if (as_bool(direction)) {
                {
                current_statement_begin__ = 12;
                int max_length(0);
                (void) max_length;  // dummy to suppress unused var warning
                stan::math::fill(max_length, std::numeric_limits<int>::min());
                stan::math::assign(max_length,std::min(s, max_pdf));
                current_statement_begin__ = 13;
                stan::model::assign(delay_mat, 
                            stan::model::cons_list(stan::model::index_uni(s), stan::model::cons_list(stan::model::index_min_max(((s - max_length) + 1), s), stan::model::nil_index_list())), 
                            stan::model::rvalue(row_pdf, stan::model::cons_list(stan::model::index_min_max(((max_pdf - max_length) + 1), max_pdf), stan::model::nil_index_list()), "row_pdf"), 
                            "assigning variable delay_mat");
                }
            } else {
                {
                current_statement_begin__ = 15;
                int max_length(0);
                (void) max_length;  // dummy to suppress unused var warning
                stan::math::fill(max_length, std::numeric_limits<int>::min());
                stan::math::assign(max_length,std::min((t - s), (max_pdf - 1)));
                current_statement_begin__ = 16;
                stan::model::assign(delay_mat, 
                            stan::model::cons_list(stan::model::index_uni(s), stan::model::cons_list(stan::model::index_min_max(s, (s + max_length)), stan::model::nil_index_list())), 
                            stan::model::rvalue(row_pdf, stan::model::cons_list(stan::model::index_min_max(1, (max_length + 1)), stan::model::nil_index_list()), "row_pdf"), 
                            "assigning variable delay_mat");
                }
            }
        }
        current_statement_begin__ = 20;
        stan::math::assign(convolved_cases, multiply(delay_mat, to_vector(cases)));
        current_statement_begin__ = 22;
        return stan::math::promote_scalar<fun_return_scalar_t__>(convolved_cases);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct convolve_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& cases,
             const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& pdf,
             const int& direction, std::ostream* pstream__) const {
        return convolve(cases, pdf, direction, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
backsample(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& cases,
               const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& pdf, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 27;
        int t(0);
        (void) t;  // dummy to suppress unused var warning
        stan::math::fill(t, std::numeric_limits<int>::min());
        stan::math::assign(t,num_elements(cases));
        current_statement_begin__ = 28;
        validate_non_negative_index("backsampled_cases", "t", t);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> backsampled_cases(t);
        stan::math::initialize(backsampled_cases, DUMMY_VAR__);
        stan::math::fill(backsampled_cases, DUMMY_VAR__);
        current_statement_begin__ = 29;
        int max_upscale(0);
        (void) max_upscale;  // dummy to suppress unused var warning
        stan::math::fill(max_upscale, std::numeric_limits<int>::min());
        stan::math::assign(max_upscale,std::min(t, num_elements(pdf)));
        current_statement_begin__ = 30;
        int pdf_length(0);
        (void) pdf_length;  // dummy to suppress unused var warning
        stan::math::fill(pdf_length, std::numeric_limits<int>::min());
        stan::math::assign(pdf_length,num_elements(pdf));
        current_statement_begin__ = 31;
        validate_non_negative_index("cdf", "pdf_length", pdf_length);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> cdf(pdf_length);
        stan::math::initialize(cdf, DUMMY_VAR__);
        stan::math::fill(cdf, DUMMY_VAR__);
        current_statement_begin__ = 33;
        stan::math::assign(backsampled_cases, convolve(cases, pdf, 0, pstream__));
        current_statement_begin__ = 36;
        stan::math::assign(cdf, cumulative_sum(pdf));
        current_statement_begin__ = 38;
        for (int i = 1; i <= max_upscale; ++i) {
            current_statement_begin__ = 39;
            stan::model::assign(backsampled_cases, 
                        stan::model::cons_list(stan::model::index_uni(((t - i) + 1)), stan::model::nil_index_list()), 
                        ((get_base1(backsampled_cases, ((t - i) + 1), "backsampled_cases", 1) + 1) / get_base1(cdf, i, "cdf", 1)), 
                        "assigning variable backsampled_cases");
        }
        current_statement_begin__ = 43;
        stan::model::assign(backsampled_cases, 
                    stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                    get_base1(backsampled_cases, (t - 1), "backsampled_cases", 1), 
                    "assigning variable backsampled_cases");
        current_statement_begin__ = 45;
        return stan::math::promote_scalar<fun_return_scalar_t__>(backsampled_cases);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct backsample_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& cases,
               const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& pdf, std::ostream* pstream__) const {
        return backsample(cases, pdf, pstream__);
    }
};
template <typename T1__, typename T2__>
typename boost::math::tools::promote_args<T1__, T2__>::type
discretised_lognormal_pmf(const int& y,
                              const T1__& mu,
                              const T2__& sigma,
                              const int& max_val, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 50;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((normal_cdf(((stan::math::log((y + 1)) - mu) / sigma), 0.0, 1.0) - normal_cdf(((stan::math::log(y) - mu) / sigma), 0.0, 1.0)) / normal_cdf(((stan::math::log(max_val) - mu) / sigma), 0.0, 1.0)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct discretised_lognormal_pmf_functor__ {
    template <typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T1__, T2__>::type
    operator()(const int& y,
                              const T1__& mu,
                              const T2__& sigma,
                              const int& max_val, std::ostream* pstream__) const {
        return discretised_lognormal_pmf(y, mu, sigma, max_val, pstream__);
    }
};
template <typename T1__, typename T2__>
typename boost::math::tools::promote_args<T1__, T2__>::type
discretised_gamma_pmf(const int& y,
                          const T1__& mu,
                          const T2__& sigma,
                          const int& max_val, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 57;
        local_scalar_t__ alpha(DUMMY_VAR__);
        (void) alpha;  // dummy to suppress unused var warning
        stan::math::initialize(alpha, DUMMY_VAR__);
        stan::math::fill(alpha, DUMMY_VAR__);
        stan::math::assign(alpha,pow((mu / sigma), 2));
        current_statement_begin__ = 58;
        local_scalar_t__ beta(DUMMY_VAR__);
        (void) beta;  // dummy to suppress unused var warning
        stan::math::initialize(beta, DUMMY_VAR__);
        stan::math::fill(beta, DUMMY_VAR__);
        stan::math::assign(beta,(mu / pow(sigma, 2)));
        current_statement_begin__ = 59;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((gamma_cdf(y, alpha, beta) - gamma_cdf((y - 1), alpha, beta)) / gamma_cdf(max_val, alpha, beta)));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct discretised_gamma_pmf_functor__ {
    template <typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T1__, T2__>::type
    operator()(const int& y,
                          const T1__& mu,
                          const T2__& sigma,
                          const int& max_val, std::ostream* pstream__) const {
        return discretised_gamma_pmf(y, mu, sigma, max_val, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_estimate_infections : public prob_grad {
private:
        int t;
        int rt;
        std::vector<int> day_of_week;
        std::vector<int> cases;
        vector_d shifted_cases;
        double inc_mean_sd;
        double inc_mean_mean;
        double inc_sd_mean;
        double inc_sd_sd;
        int max_inc;
        double rep_mean_mean;
        double rep_mean_sd;
        double rep_sd_mean;
        double rep_sd_sd;
        int max_rep;
        double r_mean;
        double r_sd;
        double gt_mean_sd;
        double gt_mean_mean;
        double gt_sd_mean;
        double gt_sd_sd;
        int max_gt;
        int model_type;
        int estimate_r;
        double r_alpha;
        double r_beta;
        double delta;
        std::vector<double> time;
        int no_rt_time;
public:
    model_estimate_infections(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_estimate_infections(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_estimate_infections_namespace::model_estimate_infections";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 65;
            context__.validate_dims("data initialization", "t", "int", context__.to_vec());
            t = int(0);
            vals_i__ = context__.vals_i("t");
            pos__ = 0;
            t = vals_i__[pos__++];
            current_statement_begin__ = 66;
            context__.validate_dims("data initialization", "rt", "int", context__.to_vec());
            rt = int(0);
            vals_i__ = context__.vals_i("rt");
            pos__ = 0;
            rt = vals_i__[pos__++];
            current_statement_begin__ = 67;
            validate_non_negative_index("day_of_week", "t", t);
            context__.validate_dims("data initialization", "day_of_week", "int", context__.to_vec(t));
            day_of_week = std::vector<int>(t, int(0));
            vals_i__ = context__.vals_i("day_of_week");
            pos__ = 0;
            size_t day_of_week_k_0_max__ = t;
            for (size_t k_0__ = 0; k_0__ < day_of_week_k_0_max__; ++k_0__) {
                day_of_week[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 68;
            validate_non_negative_index("cases", "t", t);
            context__.validate_dims("data initialization", "cases", "int", context__.to_vec(t));
            cases = std::vector<int>(t, int(0));
            vals_i__ = context__.vals_i("cases");
            pos__ = 0;
            size_t cases_k_0_max__ = t;
            for (size_t k_0__ = 0; k_0__ < cases_k_0_max__; ++k_0__) {
                cases[k_0__] = vals_i__[pos__++];
            }
            size_t cases_i_0_max__ = t;
            for (size_t i_0__ = 0; i_0__ < cases_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "cases[i_0__]", cases[i_0__], 0);
            }
            current_statement_begin__ = 69;
            validate_non_negative_index("shifted_cases", "t", t);
            context__.validate_dims("data initialization", "shifted_cases", "vector_d", context__.to_vec(t));
            shifted_cases = Eigen::Matrix<double, Eigen::Dynamic, 1>(t);
            vals_r__ = context__.vals_r("shifted_cases");
            pos__ = 0;
            size_t shifted_cases_j_1_max__ = t;
            for (size_t j_1__ = 0; j_1__ < shifted_cases_j_1_max__; ++j_1__) {
                shifted_cases(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "shifted_cases", shifted_cases, 0);
            current_statement_begin__ = 70;
            context__.validate_dims("data initialization", "inc_mean_sd", "double", context__.to_vec());
            inc_mean_sd = double(0);
            vals_r__ = context__.vals_r("inc_mean_sd");
            pos__ = 0;
            inc_mean_sd = vals_r__[pos__++];
            current_statement_begin__ = 71;
            context__.validate_dims("data initialization", "inc_mean_mean", "double", context__.to_vec());
            inc_mean_mean = double(0);
            vals_r__ = context__.vals_r("inc_mean_mean");
            pos__ = 0;
            inc_mean_mean = vals_r__[pos__++];
            current_statement_begin__ = 72;
            context__.validate_dims("data initialization", "inc_sd_mean", "double", context__.to_vec());
            inc_sd_mean = double(0);
            vals_r__ = context__.vals_r("inc_sd_mean");
            pos__ = 0;
            inc_sd_mean = vals_r__[pos__++];
            current_statement_begin__ = 73;
            context__.validate_dims("data initialization", "inc_sd_sd", "double", context__.to_vec());
            inc_sd_sd = double(0);
            vals_r__ = context__.vals_r("inc_sd_sd");
            pos__ = 0;
            inc_sd_sd = vals_r__[pos__++];
            current_statement_begin__ = 74;
            context__.validate_dims("data initialization", "max_inc", "int", context__.to_vec());
            max_inc = int(0);
            vals_i__ = context__.vals_i("max_inc");
            pos__ = 0;
            max_inc = vals_i__[pos__++];
            current_statement_begin__ = 75;
            context__.validate_dims("data initialization", "rep_mean_mean", "double", context__.to_vec());
            rep_mean_mean = double(0);
            vals_r__ = context__.vals_r("rep_mean_mean");
            pos__ = 0;
            rep_mean_mean = vals_r__[pos__++];
            current_statement_begin__ = 76;
            context__.validate_dims("data initialization", "rep_mean_sd", "double", context__.to_vec());
            rep_mean_sd = double(0);
            vals_r__ = context__.vals_r("rep_mean_sd");
            pos__ = 0;
            rep_mean_sd = vals_r__[pos__++];
            current_statement_begin__ = 77;
            context__.validate_dims("data initialization", "rep_sd_mean", "double", context__.to_vec());
            rep_sd_mean = double(0);
            vals_r__ = context__.vals_r("rep_sd_mean");
            pos__ = 0;
            rep_sd_mean = vals_r__[pos__++];
            current_statement_begin__ = 78;
            context__.validate_dims("data initialization", "rep_sd_sd", "double", context__.to_vec());
            rep_sd_sd = double(0);
            vals_r__ = context__.vals_r("rep_sd_sd");
            pos__ = 0;
            rep_sd_sd = vals_r__[pos__++];
            current_statement_begin__ = 79;
            context__.validate_dims("data initialization", "max_rep", "int", context__.to_vec());
            max_rep = int(0);
            vals_i__ = context__.vals_i("max_rep");
            pos__ = 0;
            max_rep = vals_i__[pos__++];
            current_statement_begin__ = 80;
            context__.validate_dims("data initialization", "r_mean", "double", context__.to_vec());
            r_mean = double(0);
            vals_r__ = context__.vals_r("r_mean");
            pos__ = 0;
            r_mean = vals_r__[pos__++];
            check_greater_or_equal(function__, "r_mean", r_mean, 0);
            current_statement_begin__ = 81;
            context__.validate_dims("data initialization", "r_sd", "double", context__.to_vec());
            r_sd = double(0);
            vals_r__ = context__.vals_r("r_sd");
            pos__ = 0;
            r_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "r_sd", r_sd, 0);
            current_statement_begin__ = 82;
            context__.validate_dims("data initialization", "gt_mean_sd", "double", context__.to_vec());
            gt_mean_sd = double(0);
            vals_r__ = context__.vals_r("gt_mean_sd");
            pos__ = 0;
            gt_mean_sd = vals_r__[pos__++];
            current_statement_begin__ = 83;
            context__.validate_dims("data initialization", "gt_mean_mean", "double", context__.to_vec());
            gt_mean_mean = double(0);
            vals_r__ = context__.vals_r("gt_mean_mean");
            pos__ = 0;
            gt_mean_mean = vals_r__[pos__++];
            current_statement_begin__ = 84;
            context__.validate_dims("data initialization", "gt_sd_mean", "double", context__.to_vec());
            gt_sd_mean = double(0);
            vals_r__ = context__.vals_r("gt_sd_mean");
            pos__ = 0;
            gt_sd_mean = vals_r__[pos__++];
            current_statement_begin__ = 85;
            context__.validate_dims("data initialization", "gt_sd_sd", "double", context__.to_vec());
            gt_sd_sd = double(0);
            vals_r__ = context__.vals_r("gt_sd_sd");
            pos__ = 0;
            gt_sd_sd = vals_r__[pos__++];
            current_statement_begin__ = 86;
            context__.validate_dims("data initialization", "max_gt", "int", context__.to_vec());
            max_gt = int(0);
            vals_i__ = context__.vals_i("max_gt");
            pos__ = 0;
            max_gt = vals_i__[pos__++];
            current_statement_begin__ = 87;
            context__.validate_dims("data initialization", "model_type", "int", context__.to_vec());
            model_type = int(0);
            vals_i__ = context__.vals_i("model_type");
            pos__ = 0;
            model_type = vals_i__[pos__++];
            current_statement_begin__ = 88;
            context__.validate_dims("data initialization", "estimate_r", "int", context__.to_vec());
            estimate_r = int(0);
            vals_i__ = context__.vals_i("estimate_r");
            pos__ = 0;
            estimate_r = vals_i__[pos__++];
            // initialize transformed data variables
            current_statement_begin__ = 92;
            r_alpha = double(0);
            stan::math::fill(r_alpha, DUMMY_VAR__);
            current_statement_begin__ = 93;
            r_beta = double(0);
            stan::math::fill(r_beta, DUMMY_VAR__);
            current_statement_begin__ = 94;
            delta = double(0);
            stan::math::fill(delta, DUMMY_VAR__);
            current_statement_begin__ = 95;
            validate_non_negative_index("time", "t", t);
            time = std::vector<double>(t, double(0));
            stan::math::fill(time, DUMMY_VAR__);
            current_statement_begin__ = 96;
            no_rt_time = int(0);
            stan::math::fill(no_rt_time, std::numeric_limits<int>::min());
            // execute transformed data statements
            current_statement_begin__ = 99;
            stan::math::assign(r_alpha, pow((r_mean / r_sd), 2));
            current_statement_begin__ = 100;
            stan::math::assign(r_beta, (r_mean / pow(r_sd, 2)));
            current_statement_begin__ = 103;
            stan::math::assign(delta, 1e-9);
            current_statement_begin__ = 106;
            for (int s = 1; s <= t; ++s) {
                current_statement_begin__ = 107;
                stan::model::assign(time, 
                            stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                            s, 
                            "assigning variable time");
            }
            current_statement_begin__ = 111;
            stan::math::assign(no_rt_time, (t - rt));
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 114;
            validate_non_negative_index("day_of_week_eff_raw", "7", 7);
            num_params_r__ += (7 - 1);
            current_statement_begin__ = 115;
            num_params_r__ += 1;
            current_statement_begin__ = 116;
            num_params_r__ += 1;
            current_statement_begin__ = 117;
            num_params_r__ += 1;
            current_statement_begin__ = 118;
            num_params_r__ += 1;
            current_statement_begin__ = 119;
            validate_non_negative_index("rep_phi", "model_type", model_type);
            num_params_r__ += (1 * model_type);
            current_statement_begin__ = 120;
            num_params_r__ += 1;
            current_statement_begin__ = 121;
            num_params_r__ += 1;
            current_statement_begin__ = 122;
            validate_non_negative_index("eta", "t", t);
            num_params_r__ += t;
            current_statement_begin__ = 123;
            validate_non_negative_index("initial_R", "estimate_r", estimate_r);
            num_params_r__ += estimate_r;
            current_statement_begin__ = 124;
            validate_non_negative_index("gt_mean", "estimate_r", estimate_r);
            num_params_r__ += (1 * estimate_r);
            current_statement_begin__ = 125;
            validate_non_negative_index("gt_sd", "estimate_r", estimate_r);
            num_params_r__ += (1 * estimate_r);
            current_statement_begin__ = 126;
            validate_non_negative_index("inf_phi", "(model_type * estimate_r)", (model_type * estimate_r));
            num_params_r__ += (1 * (model_type * estimate_r));
            current_statement_begin__ = 127;
            validate_non_negative_index("R_rho", "estimate_r", estimate_r);
            num_params_r__ += (1 * estimate_r);
            current_statement_begin__ = 128;
            validate_non_negative_index("R_alpha", "estimate_r", estimate_r);
            num_params_r__ += (1 * estimate_r);
            current_statement_begin__ = 129;
            validate_non_negative_index("R_eta", "(logical_gt(estimate_r, 0) ? rt : 0 )", (logical_gt(estimate_r, 0) ? rt : 0 ));
            num_params_r__ += (logical_gt(estimate_r, 0) ? rt : 0 );
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_estimate_infections() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 114;
        if (!(context__.contains_r("day_of_week_eff_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable day_of_week_eff_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("day_of_week_eff_raw");
        pos__ = 0U;
        validate_non_negative_index("day_of_week_eff_raw", "7", 7);
        context__.validate_dims("parameter initialization", "day_of_week_eff_raw", "vector_d", context__.to_vec(7));
        Eigen::Matrix<double, Eigen::Dynamic, 1> day_of_week_eff_raw(7);
        size_t day_of_week_eff_raw_j_1_max__ = 7;
        for (size_t j_1__ = 0; j_1__ < day_of_week_eff_raw_j_1_max__; ++j_1__) {
            day_of_week_eff_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.simplex_unconstrain(day_of_week_eff_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable day_of_week_eff_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 115;
        if (!(context__.contains_r("inc_mean")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable inc_mean missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("inc_mean");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "inc_mean", "double", context__.to_vec());
        double inc_mean(0);
        inc_mean = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, inc_mean);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable inc_mean: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 116;
        if (!(context__.contains_r("inc_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable inc_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("inc_sd");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "inc_sd", "double", context__.to_vec());
        double inc_sd(0);
        inc_sd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, inc_sd);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable inc_sd: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 117;
        if (!(context__.contains_r("rep_mean")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rep_mean missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rep_mean");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "rep_mean", "double", context__.to_vec());
        double rep_mean(0);
        rep_mean = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, rep_mean);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rep_mean: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 118;
        if (!(context__.contains_r("rep_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rep_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rep_sd");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "rep_sd", "double", context__.to_vec());
        double rep_sd(0);
        rep_sd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, rep_sd);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rep_sd: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 119;
        if (!(context__.contains_r("rep_phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rep_phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rep_phi");
        pos__ = 0U;
        validate_non_negative_index("rep_phi", "model_type", model_type);
        context__.validate_dims("parameter initialization", "rep_phi", "double", context__.to_vec(model_type));
        std::vector<double> rep_phi(model_type, double(0));
        size_t rep_phi_k_0_max__ = model_type;
        for (size_t k_0__ = 0; k_0__ < rep_phi_k_0_max__; ++k_0__) {
            rep_phi[k_0__] = vals_r__[pos__++];
        }
        size_t rep_phi_i_0_max__ = model_type;
        for (size_t i_0__ = 0; i_0__ < rep_phi_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, rep_phi[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rep_phi: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 120;
        if (!(context__.contains_r("rho")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rho missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rho");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "rho", "double", context__.to_vec());
        double rho(0);
        rho = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, rho);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rho: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 121;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "alpha", "double", context__.to_vec());
        double alpha(0);
        alpha = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 122;
        if (!(context__.contains_r("eta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta");
        pos__ = 0U;
        validate_non_negative_index("eta", "t", t);
        context__.validate_dims("parameter initialization", "eta", "vector_d", context__.to_vec(t));
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta(t);
        size_t eta_j_1_max__ = t;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            eta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(eta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 123;
        if (!(context__.contains_r("initial_R")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable initial_R missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("initial_R");
        pos__ = 0U;
        validate_non_negative_index("initial_R", "estimate_r", estimate_r);
        context__.validate_dims("parameter initialization", "initial_R", "vector_d", context__.to_vec(estimate_r));
        Eigen::Matrix<double, Eigen::Dynamic, 1> initial_R(estimate_r);
        size_t initial_R_j_1_max__ = estimate_r;
        for (size_t j_1__ = 0; j_1__ < initial_R_j_1_max__; ++j_1__) {
            initial_R(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, initial_R);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable initial_R: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 124;
        if (!(context__.contains_r("gt_mean")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gt_mean missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gt_mean");
        pos__ = 0U;
        validate_non_negative_index("gt_mean", "estimate_r", estimate_r);
        context__.validate_dims("parameter initialization", "gt_mean", "double", context__.to_vec(estimate_r));
        std::vector<double> gt_mean(estimate_r, double(0));
        size_t gt_mean_k_0_max__ = estimate_r;
        for (size_t k_0__ = 0; k_0__ < gt_mean_k_0_max__; ++k_0__) {
            gt_mean[k_0__] = vals_r__[pos__++];
        }
        size_t gt_mean_i_0_max__ = estimate_r;
        for (size_t i_0__ = 0; i_0__ < gt_mean_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(1, gt_mean[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gt_mean: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 125;
        if (!(context__.contains_r("gt_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gt_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gt_sd");
        pos__ = 0U;
        validate_non_negative_index("gt_sd", "estimate_r", estimate_r);
        context__.validate_dims("parameter initialization", "gt_sd", "double", context__.to_vec(estimate_r));
        std::vector<double> gt_sd(estimate_r, double(0));
        size_t gt_sd_k_0_max__ = estimate_r;
        for (size_t k_0__ = 0; k_0__ < gt_sd_k_0_max__; ++k_0__) {
            gt_sd[k_0__] = vals_r__[pos__++];
        }
        size_t gt_sd_i_0_max__ = estimate_r;
        for (size_t i_0__ = 0; i_0__ < gt_sd_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, gt_sd[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gt_sd: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 126;
        if (!(context__.contains_r("inf_phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable inf_phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("inf_phi");
        pos__ = 0U;
        validate_non_negative_index("inf_phi", "(model_type * estimate_r)", (model_type * estimate_r));
        context__.validate_dims("parameter initialization", "inf_phi", "double", context__.to_vec((model_type * estimate_r)));
        std::vector<double> inf_phi((model_type * estimate_r), double(0));
        size_t inf_phi_k_0_max__ = (model_type * estimate_r);
        for (size_t k_0__ = 0; k_0__ < inf_phi_k_0_max__; ++k_0__) {
            inf_phi[k_0__] = vals_r__[pos__++];
        }
        size_t inf_phi_i_0_max__ = (model_type * estimate_r);
        for (size_t i_0__ = 0; i_0__ < inf_phi_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, inf_phi[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable inf_phi: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 127;
        if (!(context__.contains_r("R_rho")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable R_rho missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("R_rho");
        pos__ = 0U;
        validate_non_negative_index("R_rho", "estimate_r", estimate_r);
        context__.validate_dims("parameter initialization", "R_rho", "double", context__.to_vec(estimate_r));
        std::vector<double> R_rho(estimate_r, double(0));
        size_t R_rho_k_0_max__ = estimate_r;
        for (size_t k_0__ = 0; k_0__ < R_rho_k_0_max__; ++k_0__) {
            R_rho[k_0__] = vals_r__[pos__++];
        }
        size_t R_rho_i_0_max__ = estimate_r;
        for (size_t i_0__ = 0; i_0__ < R_rho_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, R_rho[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable R_rho: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 128;
        if (!(context__.contains_r("R_alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable R_alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("R_alpha");
        pos__ = 0U;
        validate_non_negative_index("R_alpha", "estimate_r", estimate_r);
        context__.validate_dims("parameter initialization", "R_alpha", "double", context__.to_vec(estimate_r));
        std::vector<double> R_alpha(estimate_r, double(0));
        size_t R_alpha_k_0_max__ = estimate_r;
        for (size_t k_0__ = 0; k_0__ < R_alpha_k_0_max__; ++k_0__) {
            R_alpha[k_0__] = vals_r__[pos__++];
        }
        size_t R_alpha_i_0_max__ = estimate_r;
        for (size_t i_0__ = 0; i_0__ < R_alpha_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, R_alpha[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable R_alpha: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 129;
        if (!(context__.contains_r("R_eta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable R_eta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("R_eta");
        pos__ = 0U;
        validate_non_negative_index("R_eta", "(logical_gt(estimate_r, 0) ? rt : 0 )", (logical_gt(estimate_r, 0) ? rt : 0 ));
        context__.validate_dims("parameter initialization", "R_eta", "vector_d", context__.to_vec((logical_gt(estimate_r, 0) ? rt : 0 )));
        Eigen::Matrix<double, Eigen::Dynamic, 1> R_eta((logical_gt(estimate_r, 0) ? rt : 0 ));
        size_t R_eta_j_1_max__ = (logical_gt(estimate_r, 0) ? rt : 0 );
        for (size_t j_1__ = 0; j_1__ < R_eta_j_1_max__; ++j_1__) {
            R_eta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(R_eta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable R_eta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 114;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> day_of_week_eff_raw;
            (void) day_of_week_eff_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                day_of_week_eff_raw = in__.simplex_constrain(7, lp__);
            else
                day_of_week_eff_raw = in__.simplex_constrain(7);
            current_statement_begin__ = 115;
            local_scalar_t__ inc_mean;
            (void) inc_mean;  // dummy to suppress unused var warning
            if (jacobian__)
                inc_mean = in__.scalar_lb_constrain(0, lp__);
            else
                inc_mean = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 116;
            local_scalar_t__ inc_sd;
            (void) inc_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                inc_sd = in__.scalar_lb_constrain(0, lp__);
            else
                inc_sd = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 117;
            local_scalar_t__ rep_mean;
            (void) rep_mean;  // dummy to suppress unused var warning
            if (jacobian__)
                rep_mean = in__.scalar_lb_constrain(0, lp__);
            else
                rep_mean = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 118;
            local_scalar_t__ rep_sd;
            (void) rep_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                rep_sd = in__.scalar_lb_constrain(0, lp__);
            else
                rep_sd = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 119;
            std::vector<local_scalar_t__> rep_phi;
            size_t rep_phi_d_0_max__ = model_type;
            rep_phi.reserve(rep_phi_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < rep_phi_d_0_max__; ++d_0__) {
                if (jacobian__)
                    rep_phi.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    rep_phi.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 120;
            local_scalar_t__ rho;
            (void) rho;  // dummy to suppress unused var warning
            if (jacobian__)
                rho = in__.scalar_lb_constrain(0, lp__);
            else
                rho = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 121;
            local_scalar_t__ alpha;
            (void) alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha = in__.scalar_lb_constrain(0, lp__);
            else
                alpha = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 122;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta;
            (void) eta;  // dummy to suppress unused var warning
            if (jacobian__)
                eta = in__.vector_constrain(t, lp__);
            else
                eta = in__.vector_constrain(t);
            current_statement_begin__ = 123;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> initial_R;
            (void) initial_R;  // dummy to suppress unused var warning
            if (jacobian__)
                initial_R = in__.vector_lb_constrain(0, estimate_r, lp__);
            else
                initial_R = in__.vector_lb_constrain(0, estimate_r);
            current_statement_begin__ = 124;
            std::vector<local_scalar_t__> gt_mean;
            size_t gt_mean_d_0_max__ = estimate_r;
            gt_mean.reserve(gt_mean_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < gt_mean_d_0_max__; ++d_0__) {
                if (jacobian__)
                    gt_mean.push_back(in__.scalar_lb_constrain(1, lp__));
                else
                    gt_mean.push_back(in__.scalar_lb_constrain(1));
            }
            current_statement_begin__ = 125;
            std::vector<local_scalar_t__> gt_sd;
            size_t gt_sd_d_0_max__ = estimate_r;
            gt_sd.reserve(gt_sd_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < gt_sd_d_0_max__; ++d_0__) {
                if (jacobian__)
                    gt_sd.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    gt_sd.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 126;
            std::vector<local_scalar_t__> inf_phi;
            size_t inf_phi_d_0_max__ = (model_type * estimate_r);
            inf_phi.reserve(inf_phi_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < inf_phi_d_0_max__; ++d_0__) {
                if (jacobian__)
                    inf_phi.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    inf_phi.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 127;
            std::vector<local_scalar_t__> R_rho;
            size_t R_rho_d_0_max__ = estimate_r;
            R_rho.reserve(R_rho_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < R_rho_d_0_max__; ++d_0__) {
                if (jacobian__)
                    R_rho.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    R_rho.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 128;
            std::vector<local_scalar_t__> R_alpha;
            size_t R_alpha_d_0_max__ = estimate_r;
            R_alpha.reserve(R_alpha_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < R_alpha_d_0_max__; ++d_0__) {
                if (jacobian__)
                    R_alpha.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    R_alpha.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 129;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> R_eta;
            (void) R_eta;  // dummy to suppress unused var warning
            if (jacobian__)
                R_eta = in__.vector_constrain((logical_gt(estimate_r, 0) ? rt : 0 ), lp__);
            else
                R_eta = in__.vector_constrain((logical_gt(estimate_r, 0) ? rt : 0 ));
            // transformed parameters
            current_statement_begin__ = 134;
            validate_non_negative_index("noise", "t", t);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> noise(t);
            stan::math::initialize(noise, DUMMY_VAR__);
            stan::math::fill(noise, DUMMY_VAR__);
            current_statement_begin__ = 135;
            validate_non_negative_index("infections", "t", t);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> infections(t);
            stan::math::initialize(infections, DUMMY_VAR__);
            stan::math::fill(infections, DUMMY_VAR__);
            current_statement_begin__ = 136;
            validate_non_negative_index("reports", "t", t);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> reports(t);
            stan::math::initialize(reports, DUMMY_VAR__);
            stan::math::fill(reports, DUMMY_VAR__);
            current_statement_begin__ = 137;
            validate_non_negative_index("day_of_week_eff", "7", 7);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> day_of_week_eff(7);
            stan::math::initialize(day_of_week_eff, DUMMY_VAR__);
            stan::math::fill(day_of_week_eff, DUMMY_VAR__);
            current_statement_begin__ = 138;
            validate_non_negative_index("branch_reports", "(logical_gt(estimate_r, 0) ? rt : 0 )", (logical_gt(estimate_r, 0) ? rt : 0 ));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> branch_reports((logical_gt(estimate_r, 0) ? rt : 0 ));
            stan::math::initialize(branch_reports, DUMMY_VAR__);
            stan::math::fill(branch_reports, DUMMY_VAR__);
            current_statement_begin__ = 139;
            validate_non_negative_index("R", "(logical_gt(estimate_r, 0) ? rt : 0 )", (logical_gt(estimate_r, 0) ? rt : 0 ));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> R((logical_gt(estimate_r, 0) ? rt : 0 ));
            stan::math::initialize(R, DUMMY_VAR__);
            stan::math::fill(R, DUMMY_VAR__);
            // transformed parameters block statements
            {
            current_statement_begin__ = 143;
            validate_non_negative_index("rev_delay", "max_rep", max_rep);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> rev_delay(max_rep);
            stan::math::initialize(rev_delay, DUMMY_VAR__);
            stan::math::fill(rev_delay, DUMMY_VAR__);
            current_statement_begin__ = 144;
            validate_non_negative_index("rev_incubation", "max_inc", max_inc);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> rev_incubation(max_inc);
            stan::math::initialize(rev_incubation, DUMMY_VAR__);
            stan::math::fill(rev_incubation, DUMMY_VAR__);
            current_statement_begin__ = 145;
            validate_non_negative_index("onsets", "t", t);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> onsets(t);
            stan::math::initialize(onsets, DUMMY_VAR__);
            stan::math::fill(onsets, DUMMY_VAR__);
            current_statement_begin__ = 146;
            validate_non_negative_index("rev_generation_time", "(logical_gt(estimate_r, 0) ? max_gt : 0 )", (logical_gt(estimate_r, 0) ? max_gt : 0 ));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> rev_generation_time((logical_gt(estimate_r, 0) ? max_gt : 0 ));
            stan::math::initialize(rev_generation_time, DUMMY_VAR__);
            stan::math::fill(rev_generation_time, DUMMY_VAR__);
            current_statement_begin__ = 147;
            validate_non_negative_index("infectiousness", "(logical_gt(estimate_r, 0) ? t : 0 )", (logical_gt(estimate_r, 0) ? t : 0 ));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> infectiousness((logical_gt(estimate_r, 0) ? t : 0 ));
            stan::math::initialize(infectiousness, DUMMY_VAR__);
            stan::math::fill(infectiousness, DUMMY_VAR__);
            current_statement_begin__ = 148;
            validate_non_negative_index("branch_onsets", "(logical_gt(estimate_r, 0) ? t : 0 )", (logical_gt(estimate_r, 0) ? t : 0 ));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> branch_onsets((logical_gt(estimate_r, 0) ? t : 0 ));
            stan::math::initialize(branch_onsets, DUMMY_VAR__);
            stan::math::fill(branch_onsets, DUMMY_VAR__);
            current_statement_begin__ = 149;
            validate_non_negative_index("branch_infections", "(logical_gt(estimate_r, 0) ? t : 0 )", (logical_gt(estimate_r, 0) ? t : 0 ));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> branch_infections((logical_gt(estimate_r, 0) ? t : 0 ));
            stan::math::initialize(branch_infections, DUMMY_VAR__);
            stan::math::fill(branch_infections, DUMMY_VAR__);
            current_statement_begin__ = 150;
            validate_non_negative_index("K", "t", t);
            validate_non_negative_index("K", "t", t);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(t, t);
            stan::math::initialize(K, DUMMY_VAR__);
            stan::math::fill(K, DUMMY_VAR__);
            current_statement_begin__ = 151;
            validate_non_negative_index("L_K", "t", t);
            validate_non_negative_index("L_K", "t", t);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_K(t, t);
            stan::math::initialize(L_K, DUMMY_VAR__);
            stan::math::fill(L_K, DUMMY_VAR__);
            current_statement_begin__ = 152;
            validate_non_negative_index("rK", "rt", rt);
            validate_non_negative_index("rK", "rt", rt);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> rK(rt, rt);
            stan::math::initialize(rK, DUMMY_VAR__);
            stan::math::fill(rK, DUMMY_VAR__);
            current_statement_begin__ = 153;
            validate_non_negative_index("rL_K", "rt", rt);
            validate_non_negative_index("rL_K", "rt", rt);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> rL_K(rt, rt);
            stan::math::initialize(rL_K, DUMMY_VAR__);
            stan::math::fill(rL_K, DUMMY_VAR__);
            current_statement_begin__ = 154;
            validate_non_negative_index("R_noise", "(logical_gt(estimate_r, 0) ? rt : 0 )", (logical_gt(estimate_r, 0) ? rt : 0 ));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> R_noise((logical_gt(estimate_r, 0) ? rt : 0 ));
            stan::math::initialize(R_noise, DUMMY_VAR__);
            stan::math::fill(R_noise, DUMMY_VAR__);
            current_statement_begin__ = 157;
            for (int j = 1; j <= max_inc; ++j) {
                current_statement_begin__ = 158;
                stan::model::assign(rev_incubation, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            discretised_lognormal_pmf(((max_inc - j) + 1), inc_mean, inc_sd, max_inc, pstream__), 
                            "assigning variable rev_incubation");
            }
            current_statement_begin__ = 162;
            for (int j = 1; j <= max_rep; ++j) {
                current_statement_begin__ = 163;
                stan::model::assign(rev_delay, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            discretised_lognormal_pmf(((max_rep - j) + 1), rep_mean, rep_sd, max_rep, pstream__), 
                            "assigning variable rev_delay");
            }
            current_statement_begin__ = 168;
            stan::math::assign(day_of_week_eff, multiply(7, day_of_week_eff_raw));
            current_statement_begin__ = 171;
            stan::math::assign(K, cov_exp_quad(time, alpha, rho));
            current_statement_begin__ = 173;
            for (int n = 1; n <= t; ++n) {
                current_statement_begin__ = 174;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                            (get_base1(K, n, n, "K", 1) + delta), 
                            "assigning variable K");
            }
            current_statement_begin__ = 177;
            stan::math::assign(L_K, cholesky_decompose(K));
            current_statement_begin__ = 178;
            stan::math::assign(noise, stan::math::exp(multiply(L_K, eta)));
            current_statement_begin__ = 180;
            for (int s = 1; s <= t; ++s) {
                current_statement_begin__ = 181;
                if (as_bool(logical_eq(get_base1(noise, s, "noise", 1), 0))) {
                    current_statement_begin__ = 182;
                    stan::model::assign(noise, 
                                stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                0.0001, 
                                "assigning variable noise");
                }
            }
            current_statement_begin__ = 187;
            stan::math::assign(infections, elt_multiply(shifted_cases, noise));
            current_statement_begin__ = 190;
            stan::math::assign(onsets, convolve(infections, rev_incubation, 1, pstream__));
            current_statement_begin__ = 193;
            stan::math::assign(reports, convolve(onsets, rev_delay, 1, pstream__));
            current_statement_begin__ = 195;
            for (int s = 1; s <= t; ++s) {
                current_statement_begin__ = 197;
                stan::model::assign(reports, 
                            stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                            (stan::model::rvalue(reports, stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), "reports") * get_base1(day_of_week_eff, get_base1(day_of_week, s, "day_of_week", 1), "day_of_week_eff", 1)), 
                            "assigning variable reports");
            }
            current_statement_begin__ = 203;
            if (as_bool(estimate_r)) {
                current_statement_begin__ = 205;
                for (int j = 1; j <= (max_gt - 1); ++j) {
                    current_statement_begin__ = 206;
                    stan::model::assign(rev_generation_time, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                                discretised_gamma_pmf((max_gt - j), get_base1(gt_mean, estimate_r, "gt_mean", 1), get_base1(gt_sd, estimate_r, "gt_sd", 1), max_gt, pstream__), 
                                "assigning variable rev_generation_time");
                }
                current_statement_begin__ = 211;
                stan::model::assign(rev_generation_time, 
                            stan::model::cons_list(stan::model::index_uni(max_gt), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable rev_generation_time");
                current_statement_begin__ = 213;
                stan::math::assign(infectiousness, convolve(infections, rev_generation_time, 1, pstream__));
                current_statement_begin__ = 216;
                stan::math::assign(rK, cov_exp_quad(stan::model::rvalue(time, stan::model::cons_list(stan::model::index_min_max(1, rt), stan::model::nil_index_list()), "time"), get_base1(R_alpha, estimate_r, "R_alpha", 1), get_base1(R_rho, estimate_r, "R_rho", 1)));
                current_statement_begin__ = 218;
                for (int n = 1; n <= rt; ++n) {
                    current_statement_begin__ = 219;
                    stan::model::assign(rK, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                                (get_base1(rK, n, n, "rK", 1) + delta), 
                                "assigning variable rK");
                }
                current_statement_begin__ = 221;
                stan::math::assign(rL_K, cholesky_decompose(rK));
                current_statement_begin__ = 222;
                stan::math::assign(R_noise, stan::math::exp(multiply(rL_K, R_eta)));
                current_statement_begin__ = 225;
                stan::model::assign(branch_infections, 
                            stan::model::cons_list(stan::model::index_min_max(1, no_rt_time), stan::model::nil_index_list()), 
                            stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min_max(1, no_rt_time), stan::model::nil_index_list()), "infections"), 
                            "assigning variable branch_infections");
                current_statement_begin__ = 227;
                for (int s = 1; s <= rt; ++s) {
                    current_statement_begin__ = 228;
                    stan::model::assign(R, 
                                stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                (get_base1(initial_R, estimate_r, "initial_R", 1) * get_base1(R_noise, s, "R_noise", 1)), 
                                "assigning variable R");
                    current_statement_begin__ = 229;
                    stan::model::assign(branch_infections, 
                                stan::model::cons_list(stan::model::index_uni((s + no_rt_time)), stan::model::nil_index_list()), 
                                (get_base1(R, s, "R", 1) * get_base1(infectiousness, (s + no_rt_time), "infectiousness", 1)), 
                                "assigning variable branch_infections");
                    current_statement_begin__ = 232;
                    if (as_bool(logical_eq(get_base1(branch_infections, s, "branch_infections", 1), 0))) {
                        current_statement_begin__ = 233;
                        stan::model::assign(branch_infections, 
                                    stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                    0.0001, 
                                    "assigning variable branch_infections");
                    }
                }
                current_statement_begin__ = 237;
                stan::math::assign(branch_onsets, convolve(branch_infections, rev_incubation, 1, pstream__));
                {
                current_statement_begin__ = 241;
                validate_non_negative_index("branch_reports_hold", "(logical_gt(estimate_r, 0) ? t : 0 )", (logical_gt(estimate_r, 0) ? t : 0 ));
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> branch_reports_hold((logical_gt(estimate_r, 0) ? t : 0 ));
                stan::math::initialize(branch_reports_hold, DUMMY_VAR__);
                stan::math::fill(branch_reports_hold, DUMMY_VAR__);
                current_statement_begin__ = 242;
                stan::math::assign(branch_reports_hold, convolve(branch_onsets, rev_delay, 1, pstream__));
                current_statement_begin__ = 243;
                stan::math::assign(branch_reports, stan::model::rvalue(branch_reports_hold, stan::model::cons_list(stan::model::index_min_max((no_rt_time + 1), t), stan::model::nil_index_list()), "branch_reports_hold"));
                }
                current_statement_begin__ = 246;
                for (int s = 1; s <= rt; ++s) {
                    current_statement_begin__ = 248;
                    stan::model::assign(branch_reports, 
                                stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                (stan::model::rvalue(branch_reports, stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), "branch_reports") * get_base1(day_of_week_eff, get_base1(day_of_week, (s + no_rt_time), "day_of_week", 1), "day_of_week_eff", 1)), 
                                "assigning variable branch_reports");
                }
            }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 134;
            size_t noise_j_1_max__ = t;
            for (size_t j_1__ = 0; j_1__ < noise_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(noise(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: noise" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable noise: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "noise", noise, 0);
            current_statement_begin__ = 135;
            size_t infections_j_1_max__ = t;
            for (size_t j_1__ = 0; j_1__ < infections_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(infections(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: infections" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable infections: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "infections", infections, 0);
            current_statement_begin__ = 136;
            size_t reports_j_1_max__ = t;
            for (size_t j_1__ = 0; j_1__ < reports_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(reports(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: reports" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable reports: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "reports", reports, 0);
            current_statement_begin__ = 137;
            size_t day_of_week_eff_j_1_max__ = 7;
            for (size_t j_1__ = 0; j_1__ < day_of_week_eff_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(day_of_week_eff(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: day_of_week_eff" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable day_of_week_eff: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 138;
            size_t branch_reports_j_1_max__ = (logical_gt(estimate_r, 0) ? rt : 0 );
            for (size_t j_1__ = 0; j_1__ < branch_reports_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(branch_reports(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: branch_reports" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable branch_reports: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 139;
            size_t R_j_1_max__ = (logical_gt(estimate_r, 0) ? rt : 0 );
            for (size_t j_1__ = 0; j_1__ < R_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(R(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: R" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable R: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 257;
            lp_accum__.add(lognormal_log<propto__>(rho, 1.609438, 0.5));
            current_statement_begin__ = 258;
            lp_accum__.add(std_normal_log<propto__>(alpha));
            current_statement_begin__ = 259;
            lp_accum__.add(std_normal_log<propto__>(eta));
            current_statement_begin__ = 262;
            if (as_bool(model_type)) {
                current_statement_begin__ = 263;
                lp_accum__.add(exponential_log<propto__>(get_base1(rep_phi, model_type, "rep_phi", 1), 1));
            }
            current_statement_begin__ = 267;
            if (as_bool(model_type)) {
                current_statement_begin__ = 268;
                lp_accum__.add(neg_binomial_2_log(cases, reports, get_base1(rep_phi, model_type, "rep_phi", 1)));
            } else {
                current_statement_begin__ = 270;
                lp_accum__.add(poisson_log(cases, reports));
            }
            current_statement_begin__ = 274;
            lp_accum__.add((normal_log(inc_mean, inc_mean_mean, inc_mean_sd) * t));
            current_statement_begin__ = 275;
            lp_accum__.add((normal_log(inc_sd, inc_sd_mean, inc_sd_sd) * t));
            current_statement_begin__ = 276;
            lp_accum__.add((normal_log(rep_mean, rep_mean_mean, rep_mean_sd) * t));
            current_statement_begin__ = 277;
            lp_accum__.add((normal_log(rep_sd, rep_sd_mean, rep_sd_sd) * t));
            current_statement_begin__ = 282;
            if (as_bool(estimate_r)) {
                current_statement_begin__ = 284;
                if (as_bool(model_type)) {
                    current_statement_begin__ = 285;
                    lp_accum__.add(exponential_log<propto__>(inf_phi, 1));
                }
                current_statement_begin__ = 289;
                lp_accum__.add(gamma_log<propto__>(get_base1(initial_R, estimate_r, "initial_R", 1), r_alpha, r_beta));
                current_statement_begin__ = 292;
                lp_accum__.add(lognormal_log<propto__>(R_rho, 1.609438, 0.5));
                current_statement_begin__ = 293;
                lp_accum__.add(std_normal_log<propto__>(R_alpha));
                current_statement_begin__ = 294;
                lp_accum__.add(std_normal_log<propto__>(R_eta));
                current_statement_begin__ = 297;
                lp_accum__.add((normal_log(gt_mean, gt_mean_mean, gt_mean_sd) * rt));
                current_statement_begin__ = 298;
                lp_accum__.add((normal_log(gt_sd, gt_sd_mean, gt_sd_sd) * rt));
                current_statement_begin__ = 301;
                if (as_bool(model_type)) {
                    current_statement_begin__ = 302;
                    lp_accum__.add(neg_binomial_2_log(stan::model::rvalue(cases, stan::model::cons_list(stan::model::index_min_max((no_rt_time + 1), t), stan::model::nil_index_list()), "cases"), branch_reports, get_base1(inf_phi, (model_type * estimate_r), "inf_phi", 1)));
                } else {
                    current_statement_begin__ = 304;
                    lp_accum__.add(poisson_log(stan::model::rvalue(cases, stan::model::cons_list(stan::model::index_min_max((no_rt_time + 1), t), stan::model::nil_index_list()), "cases"), branch_reports));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("day_of_week_eff_raw");
        names__.push_back("inc_mean");
        names__.push_back("inc_sd");
        names__.push_back("rep_mean");
        names__.push_back("rep_sd");
        names__.push_back("rep_phi");
        names__.push_back("rho");
        names__.push_back("alpha");
        names__.push_back("eta");
        names__.push_back("initial_R");
        names__.push_back("gt_mean");
        names__.push_back("gt_sd");
        names__.push_back("inf_phi");
        names__.push_back("R_rho");
        names__.push_back("R_alpha");
        names__.push_back("R_eta");
        names__.push_back("noise");
        names__.push_back("infections");
        names__.push_back("reports");
        names__.push_back("day_of_week_eff");
        names__.push_back("branch_reports");
        names__.push_back("R");
        names__.push_back("imputed_infections");
        names__.push_back("r");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(7);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(model_type);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(estimate_r);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(estimate_r);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(estimate_r);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((model_type * estimate_r));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(estimate_r);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(estimate_r);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_gt(estimate_r, 0) ? rt : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(7);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_gt(estimate_r, 0) ? rt : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_gt(estimate_r, 0) ? rt : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_gt(estimate_r, 0) ? rt : 0 ));
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_estimate_infections_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> day_of_week_eff_raw = in__.simplex_constrain(7);
        size_t day_of_week_eff_raw_j_1_max__ = 7;
        for (size_t j_1__ = 0; j_1__ < day_of_week_eff_raw_j_1_max__; ++j_1__) {
            vars__.push_back(day_of_week_eff_raw(j_1__));
        }
        double inc_mean = in__.scalar_lb_constrain(0);
        vars__.push_back(inc_mean);
        double inc_sd = in__.scalar_lb_constrain(0);
        vars__.push_back(inc_sd);
        double rep_mean = in__.scalar_lb_constrain(0);
        vars__.push_back(rep_mean);
        double rep_sd = in__.scalar_lb_constrain(0);
        vars__.push_back(rep_sd);
        std::vector<double> rep_phi;
        size_t rep_phi_d_0_max__ = model_type;
        rep_phi.reserve(rep_phi_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < rep_phi_d_0_max__; ++d_0__) {
            rep_phi.push_back(in__.scalar_lb_constrain(0));
        }
        size_t rep_phi_k_0_max__ = model_type;
        for (size_t k_0__ = 0; k_0__ < rep_phi_k_0_max__; ++k_0__) {
            vars__.push_back(rep_phi[k_0__]);
        }
        double rho = in__.scalar_lb_constrain(0);
        vars__.push_back(rho);
        double alpha = in__.scalar_lb_constrain(0);
        vars__.push_back(alpha);
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta = in__.vector_constrain(t);
        size_t eta_j_1_max__ = t;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            vars__.push_back(eta(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> initial_R = in__.vector_lb_constrain(0, estimate_r);
        size_t initial_R_j_1_max__ = estimate_r;
        for (size_t j_1__ = 0; j_1__ < initial_R_j_1_max__; ++j_1__) {
            vars__.push_back(initial_R(j_1__));
        }
        std::vector<double> gt_mean;
        size_t gt_mean_d_0_max__ = estimate_r;
        gt_mean.reserve(gt_mean_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < gt_mean_d_0_max__; ++d_0__) {
            gt_mean.push_back(in__.scalar_lb_constrain(1));
        }
        size_t gt_mean_k_0_max__ = estimate_r;
        for (size_t k_0__ = 0; k_0__ < gt_mean_k_0_max__; ++k_0__) {
            vars__.push_back(gt_mean[k_0__]);
        }
        std::vector<double> gt_sd;
        size_t gt_sd_d_0_max__ = estimate_r;
        gt_sd.reserve(gt_sd_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < gt_sd_d_0_max__; ++d_0__) {
            gt_sd.push_back(in__.scalar_lb_constrain(0));
        }
        size_t gt_sd_k_0_max__ = estimate_r;
        for (size_t k_0__ = 0; k_0__ < gt_sd_k_0_max__; ++k_0__) {
            vars__.push_back(gt_sd[k_0__]);
        }
        std::vector<double> inf_phi;
        size_t inf_phi_d_0_max__ = (model_type * estimate_r);
        inf_phi.reserve(inf_phi_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < inf_phi_d_0_max__; ++d_0__) {
            inf_phi.push_back(in__.scalar_lb_constrain(0));
        }
        size_t inf_phi_k_0_max__ = (model_type * estimate_r);
        for (size_t k_0__ = 0; k_0__ < inf_phi_k_0_max__; ++k_0__) {
            vars__.push_back(inf_phi[k_0__]);
        }
        std::vector<double> R_rho;
        size_t R_rho_d_0_max__ = estimate_r;
        R_rho.reserve(R_rho_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < R_rho_d_0_max__; ++d_0__) {
            R_rho.push_back(in__.scalar_lb_constrain(0));
        }
        size_t R_rho_k_0_max__ = estimate_r;
        for (size_t k_0__ = 0; k_0__ < R_rho_k_0_max__; ++k_0__) {
            vars__.push_back(R_rho[k_0__]);
        }
        std::vector<double> R_alpha;
        size_t R_alpha_d_0_max__ = estimate_r;
        R_alpha.reserve(R_alpha_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < R_alpha_d_0_max__; ++d_0__) {
            R_alpha.push_back(in__.scalar_lb_constrain(0));
        }
        size_t R_alpha_k_0_max__ = estimate_r;
        for (size_t k_0__ = 0; k_0__ < R_alpha_k_0_max__; ++k_0__) {
            vars__.push_back(R_alpha[k_0__]);
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> R_eta = in__.vector_constrain((logical_gt(estimate_r, 0) ? rt : 0 ));
        size_t R_eta_j_1_max__ = (logical_gt(estimate_r, 0) ? rt : 0 );
        for (size_t j_1__ = 0; j_1__ < R_eta_j_1_max__; ++j_1__) {
            vars__.push_back(R_eta(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 134;
            validate_non_negative_index("noise", "t", t);
            Eigen::Matrix<double, Eigen::Dynamic, 1> noise(t);
            stan::math::initialize(noise, DUMMY_VAR__);
            stan::math::fill(noise, DUMMY_VAR__);
            current_statement_begin__ = 135;
            validate_non_negative_index("infections", "t", t);
            Eigen::Matrix<double, Eigen::Dynamic, 1> infections(t);
            stan::math::initialize(infections, DUMMY_VAR__);
            stan::math::fill(infections, DUMMY_VAR__);
            current_statement_begin__ = 136;
            validate_non_negative_index("reports", "t", t);
            Eigen::Matrix<double, Eigen::Dynamic, 1> reports(t);
            stan::math::initialize(reports, DUMMY_VAR__);
            stan::math::fill(reports, DUMMY_VAR__);
            current_statement_begin__ = 137;
            validate_non_negative_index("day_of_week_eff", "7", 7);
            Eigen::Matrix<double, Eigen::Dynamic, 1> day_of_week_eff(7);
            stan::math::initialize(day_of_week_eff, DUMMY_VAR__);
            stan::math::fill(day_of_week_eff, DUMMY_VAR__);
            current_statement_begin__ = 138;
            validate_non_negative_index("branch_reports", "(logical_gt(estimate_r, 0) ? rt : 0 )", (logical_gt(estimate_r, 0) ? rt : 0 ));
            Eigen::Matrix<double, Eigen::Dynamic, 1> branch_reports((logical_gt(estimate_r, 0) ? rt : 0 ));
            stan::math::initialize(branch_reports, DUMMY_VAR__);
            stan::math::fill(branch_reports, DUMMY_VAR__);
            current_statement_begin__ = 139;
            validate_non_negative_index("R", "(logical_gt(estimate_r, 0) ? rt : 0 )", (logical_gt(estimate_r, 0) ? rt : 0 ));
            Eigen::Matrix<double, Eigen::Dynamic, 1> R((logical_gt(estimate_r, 0) ? rt : 0 ));
            stan::math::initialize(R, DUMMY_VAR__);
            stan::math::fill(R, DUMMY_VAR__);
            // do transformed parameters statements
            {
            current_statement_begin__ = 143;
            validate_non_negative_index("rev_delay", "max_rep", max_rep);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> rev_delay(max_rep);
            stan::math::initialize(rev_delay, DUMMY_VAR__);
            stan::math::fill(rev_delay, DUMMY_VAR__);
            current_statement_begin__ = 144;
            validate_non_negative_index("rev_incubation", "max_inc", max_inc);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> rev_incubation(max_inc);
            stan::math::initialize(rev_incubation, DUMMY_VAR__);
            stan::math::fill(rev_incubation, DUMMY_VAR__);
            current_statement_begin__ = 145;
            validate_non_negative_index("onsets", "t", t);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> onsets(t);
            stan::math::initialize(onsets, DUMMY_VAR__);
            stan::math::fill(onsets, DUMMY_VAR__);
            current_statement_begin__ = 146;
            validate_non_negative_index("rev_generation_time", "(logical_gt(estimate_r, 0) ? max_gt : 0 )", (logical_gt(estimate_r, 0) ? max_gt : 0 ));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> rev_generation_time((logical_gt(estimate_r, 0) ? max_gt : 0 ));
            stan::math::initialize(rev_generation_time, DUMMY_VAR__);
            stan::math::fill(rev_generation_time, DUMMY_VAR__);
            current_statement_begin__ = 147;
            validate_non_negative_index("infectiousness", "(logical_gt(estimate_r, 0) ? t : 0 )", (logical_gt(estimate_r, 0) ? t : 0 ));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> infectiousness((logical_gt(estimate_r, 0) ? t : 0 ));
            stan::math::initialize(infectiousness, DUMMY_VAR__);
            stan::math::fill(infectiousness, DUMMY_VAR__);
            current_statement_begin__ = 148;
            validate_non_negative_index("branch_onsets", "(logical_gt(estimate_r, 0) ? t : 0 )", (logical_gt(estimate_r, 0) ? t : 0 ));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> branch_onsets((logical_gt(estimate_r, 0) ? t : 0 ));
            stan::math::initialize(branch_onsets, DUMMY_VAR__);
            stan::math::fill(branch_onsets, DUMMY_VAR__);
            current_statement_begin__ = 149;
            validate_non_negative_index("branch_infections", "(logical_gt(estimate_r, 0) ? t : 0 )", (logical_gt(estimate_r, 0) ? t : 0 ));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> branch_infections((logical_gt(estimate_r, 0) ? t : 0 ));
            stan::math::initialize(branch_infections, DUMMY_VAR__);
            stan::math::fill(branch_infections, DUMMY_VAR__);
            current_statement_begin__ = 150;
            validate_non_negative_index("K", "t", t);
            validate_non_negative_index("K", "t", t);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(t, t);
            stan::math::initialize(K, DUMMY_VAR__);
            stan::math::fill(K, DUMMY_VAR__);
            current_statement_begin__ = 151;
            validate_non_negative_index("L_K", "t", t);
            validate_non_negative_index("L_K", "t", t);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_K(t, t);
            stan::math::initialize(L_K, DUMMY_VAR__);
            stan::math::fill(L_K, DUMMY_VAR__);
            current_statement_begin__ = 152;
            validate_non_negative_index("rK", "rt", rt);
            validate_non_negative_index("rK", "rt", rt);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> rK(rt, rt);
            stan::math::initialize(rK, DUMMY_VAR__);
            stan::math::fill(rK, DUMMY_VAR__);
            current_statement_begin__ = 153;
            validate_non_negative_index("rL_K", "rt", rt);
            validate_non_negative_index("rL_K", "rt", rt);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> rL_K(rt, rt);
            stan::math::initialize(rL_K, DUMMY_VAR__);
            stan::math::fill(rL_K, DUMMY_VAR__);
            current_statement_begin__ = 154;
            validate_non_negative_index("R_noise", "(logical_gt(estimate_r, 0) ? rt : 0 )", (logical_gt(estimate_r, 0) ? rt : 0 ));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> R_noise((logical_gt(estimate_r, 0) ? rt : 0 ));
            stan::math::initialize(R_noise, DUMMY_VAR__);
            stan::math::fill(R_noise, DUMMY_VAR__);
            current_statement_begin__ = 157;
            for (int j = 1; j <= max_inc; ++j) {
                current_statement_begin__ = 158;
                stan::model::assign(rev_incubation, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            discretised_lognormal_pmf(((max_inc - j) + 1), inc_mean, inc_sd, max_inc, pstream__), 
                            "assigning variable rev_incubation");
            }
            current_statement_begin__ = 162;
            for (int j = 1; j <= max_rep; ++j) {
                current_statement_begin__ = 163;
                stan::model::assign(rev_delay, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            discretised_lognormal_pmf(((max_rep - j) + 1), rep_mean, rep_sd, max_rep, pstream__), 
                            "assigning variable rev_delay");
            }
            current_statement_begin__ = 168;
            stan::math::assign(day_of_week_eff, multiply(7, day_of_week_eff_raw));
            current_statement_begin__ = 171;
            stan::math::assign(K, cov_exp_quad(time, alpha, rho));
            current_statement_begin__ = 173;
            for (int n = 1; n <= t; ++n) {
                current_statement_begin__ = 174;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                            (get_base1(K, n, n, "K", 1) + delta), 
                            "assigning variable K");
            }
            current_statement_begin__ = 177;
            stan::math::assign(L_K, cholesky_decompose(K));
            current_statement_begin__ = 178;
            stan::math::assign(noise, stan::math::exp(multiply(L_K, eta)));
            current_statement_begin__ = 180;
            for (int s = 1; s <= t; ++s) {
                current_statement_begin__ = 181;
                if (as_bool(logical_eq(get_base1(noise, s, "noise", 1), 0))) {
                    current_statement_begin__ = 182;
                    stan::model::assign(noise, 
                                stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                0.0001, 
                                "assigning variable noise");
                }
            }
            current_statement_begin__ = 187;
            stan::math::assign(infections, elt_multiply(shifted_cases, noise));
            current_statement_begin__ = 190;
            stan::math::assign(onsets, convolve(infections, rev_incubation, 1, pstream__));
            current_statement_begin__ = 193;
            stan::math::assign(reports, convolve(onsets, rev_delay, 1, pstream__));
            current_statement_begin__ = 195;
            for (int s = 1; s <= t; ++s) {
                current_statement_begin__ = 197;
                stan::model::assign(reports, 
                            stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                            (stan::model::rvalue(reports, stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), "reports") * get_base1(day_of_week_eff, get_base1(day_of_week, s, "day_of_week", 1), "day_of_week_eff", 1)), 
                            "assigning variable reports");
            }
            current_statement_begin__ = 203;
            if (as_bool(estimate_r)) {
                current_statement_begin__ = 205;
                for (int j = 1; j <= (max_gt - 1); ++j) {
                    current_statement_begin__ = 206;
                    stan::model::assign(rev_generation_time, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                                discretised_gamma_pmf((max_gt - j), get_base1(gt_mean, estimate_r, "gt_mean", 1), get_base1(gt_sd, estimate_r, "gt_sd", 1), max_gt, pstream__), 
                                "assigning variable rev_generation_time");
                }
                current_statement_begin__ = 211;
                stan::model::assign(rev_generation_time, 
                            stan::model::cons_list(stan::model::index_uni(max_gt), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable rev_generation_time");
                current_statement_begin__ = 213;
                stan::math::assign(infectiousness, convolve(infections, rev_generation_time, 1, pstream__));
                current_statement_begin__ = 216;
                stan::math::assign(rK, cov_exp_quad(stan::model::rvalue(time, stan::model::cons_list(stan::model::index_min_max(1, rt), stan::model::nil_index_list()), "time"), get_base1(R_alpha, estimate_r, "R_alpha", 1), get_base1(R_rho, estimate_r, "R_rho", 1)));
                current_statement_begin__ = 218;
                for (int n = 1; n <= rt; ++n) {
                    current_statement_begin__ = 219;
                    stan::model::assign(rK, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                                (get_base1(rK, n, n, "rK", 1) + delta), 
                                "assigning variable rK");
                }
                current_statement_begin__ = 221;
                stan::math::assign(rL_K, cholesky_decompose(rK));
                current_statement_begin__ = 222;
                stan::math::assign(R_noise, stan::math::exp(multiply(rL_K, R_eta)));
                current_statement_begin__ = 225;
                stan::model::assign(branch_infections, 
                            stan::model::cons_list(stan::model::index_min_max(1, no_rt_time), stan::model::nil_index_list()), 
                            stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min_max(1, no_rt_time), stan::model::nil_index_list()), "infections"), 
                            "assigning variable branch_infections");
                current_statement_begin__ = 227;
                for (int s = 1; s <= rt; ++s) {
                    current_statement_begin__ = 228;
                    stan::model::assign(R, 
                                stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                (get_base1(initial_R, estimate_r, "initial_R", 1) * get_base1(R_noise, s, "R_noise", 1)), 
                                "assigning variable R");
                    current_statement_begin__ = 229;
                    stan::model::assign(branch_infections, 
                                stan::model::cons_list(stan::model::index_uni((s + no_rt_time)), stan::model::nil_index_list()), 
                                (get_base1(R, s, "R", 1) * get_base1(infectiousness, (s + no_rt_time), "infectiousness", 1)), 
                                "assigning variable branch_infections");
                    current_statement_begin__ = 232;
                    if (as_bool(logical_eq(get_base1(branch_infections, s, "branch_infections", 1), 0))) {
                        current_statement_begin__ = 233;
                        stan::model::assign(branch_infections, 
                                    stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                    0.0001, 
                                    "assigning variable branch_infections");
                    }
                }
                current_statement_begin__ = 237;
                stan::math::assign(branch_onsets, convolve(branch_infections, rev_incubation, 1, pstream__));
                {
                current_statement_begin__ = 241;
                validate_non_negative_index("branch_reports_hold", "(logical_gt(estimate_r, 0) ? t : 0 )", (logical_gt(estimate_r, 0) ? t : 0 ));
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> branch_reports_hold((logical_gt(estimate_r, 0) ? t : 0 ));
                stan::math::initialize(branch_reports_hold, DUMMY_VAR__);
                stan::math::fill(branch_reports_hold, DUMMY_VAR__);
                current_statement_begin__ = 242;
                stan::math::assign(branch_reports_hold, convolve(branch_onsets, rev_delay, 1, pstream__));
                current_statement_begin__ = 243;
                stan::math::assign(branch_reports, stan::model::rvalue(branch_reports_hold, stan::model::cons_list(stan::model::index_min_max((no_rt_time + 1), t), stan::model::nil_index_list()), "branch_reports_hold"));
                }
                current_statement_begin__ = 246;
                for (int s = 1; s <= rt; ++s) {
                    current_statement_begin__ = 248;
                    stan::model::assign(branch_reports, 
                                stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                (stan::model::rvalue(branch_reports, stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), "branch_reports") * get_base1(day_of_week_eff, get_base1(day_of_week, (s + no_rt_time), "day_of_week", 1), "day_of_week_eff", 1)), 
                                "assigning variable branch_reports");
                }
            }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 134;
            check_greater_or_equal(function__, "noise", noise, 0);
            current_statement_begin__ = 135;
            check_greater_or_equal(function__, "infections", infections, 0);
            current_statement_begin__ = 136;
            check_greater_or_equal(function__, "reports", reports, 0);
            // write transformed parameters
            if (include_tparams__) {
                size_t noise_j_1_max__ = t;
                for (size_t j_1__ = 0; j_1__ < noise_j_1_max__; ++j_1__) {
                    vars__.push_back(noise(j_1__));
                }
                size_t infections_j_1_max__ = t;
                for (size_t j_1__ = 0; j_1__ < infections_j_1_max__; ++j_1__) {
                    vars__.push_back(infections(j_1__));
                }
                size_t reports_j_1_max__ = t;
                for (size_t j_1__ = 0; j_1__ < reports_j_1_max__; ++j_1__) {
                    vars__.push_back(reports(j_1__));
                }
                size_t day_of_week_eff_j_1_max__ = 7;
                for (size_t j_1__ = 0; j_1__ < day_of_week_eff_j_1_max__; ++j_1__) {
                    vars__.push_back(day_of_week_eff(j_1__));
                }
                size_t branch_reports_j_1_max__ = (logical_gt(estimate_r, 0) ? rt : 0 );
                for (size_t j_1__ = 0; j_1__ < branch_reports_j_1_max__; ++j_1__) {
                    vars__.push_back(branch_reports(j_1__));
                }
                size_t R_j_1_max__ = (logical_gt(estimate_r, 0) ? rt : 0 );
                for (size_t j_1__ = 0; j_1__ < R_j_1_max__; ++j_1__) {
                    vars__.push_back(R(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 310;
            validate_non_negative_index("imputed_infections", "t", t);
            std::vector<int> imputed_infections(t, int(0));
            stan::math::fill(imputed_infections, std::numeric_limits<int>::min());
            current_statement_begin__ = 311;
            validate_non_negative_index("r", "(logical_gt(estimate_r, 0) ? rt : 0 )", (logical_gt(estimate_r, 0) ? rt : 0 ));
            std::vector<double> r((logical_gt(estimate_r, 0) ? rt : 0 ), double(0));
            stan::math::initialize(r, DUMMY_VAR__);
            stan::math::fill(r, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 314;
            stan::math::assign(imputed_infections, poisson_rng(infections, base_rng__));
            current_statement_begin__ = 317;
            if (as_bool(estimate_r)) {
                {
                current_statement_begin__ = 318;
                local_scalar_t__ k(DUMMY_VAR__);
                (void) k;  // dummy to suppress unused var warning
                stan::math::initialize(k, DUMMY_VAR__);
                stan::math::fill(k, DUMMY_VAR__);
                stan::math::assign(k,pow((get_base1(gt_sd, estimate_r, "gt_sd", 1) / get_base1(gt_mean, estimate_r, "gt_mean", 1)), 2));
                current_statement_begin__ = 319;
                for (int s = 1; s <= rt; ++s) {
                    current_statement_begin__ = 320;
                    stan::model::assign(r, 
                                stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                ((pow(get_base1(R, s, "R", 1), k) - 1) / (k * get_base1(gt_mean, estimate_r, "gt_mean", 1))), 
                                "assigning variable r");
                }
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 310;
            size_t imputed_infections_k_0_max__ = t;
            for (size_t k_0__ = 0; k_0__ < imputed_infections_k_0_max__; ++k_0__) {
                vars__.push_back(imputed_infections[k_0__]);
            }
            current_statement_begin__ = 311;
            size_t r_k_0_max__ = (logical_gt(estimate_r, 0) ? rt : 0 );
            for (size_t k_0__ = 0; k_0__ < r_k_0_max__; ++k_0__) {
                vars__.push_back(r[k_0__]);
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_estimate_infections";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t day_of_week_eff_raw_j_1_max__ = 7;
        for (size_t j_1__ = 0; j_1__ < day_of_week_eff_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "day_of_week_eff_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "inc_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "inc_sd";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rep_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rep_sd";
        param_names__.push_back(param_name_stream__.str());
        size_t rep_phi_k_0_max__ = model_type;
        for (size_t k_0__ = 0; k_0__ < rep_phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rep_phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        size_t eta_j_1_max__ = t;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t initial_R_j_1_max__ = estimate_r;
        for (size_t j_1__ = 0; j_1__ < initial_R_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "initial_R" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gt_mean_k_0_max__ = estimate_r;
        for (size_t k_0__ = 0; k_0__ < gt_mean_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gt_mean" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gt_sd_k_0_max__ = estimate_r;
        for (size_t k_0__ = 0; k_0__ < gt_sd_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gt_sd" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t inf_phi_k_0_max__ = (model_type * estimate_r);
        for (size_t k_0__ = 0; k_0__ < inf_phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "inf_phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t R_rho_k_0_max__ = estimate_r;
        for (size_t k_0__ = 0; k_0__ < R_rho_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "R_rho" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t R_alpha_k_0_max__ = estimate_r;
        for (size_t k_0__ = 0; k_0__ < R_alpha_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "R_alpha" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t R_eta_j_1_max__ = (logical_gt(estimate_r, 0) ? rt : 0 );
        for (size_t j_1__ = 0; j_1__ < R_eta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "R_eta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t noise_j_1_max__ = t;
            for (size_t j_1__ = 0; j_1__ < noise_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "noise" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t infections_j_1_max__ = t;
            for (size_t j_1__ = 0; j_1__ < infections_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "infections" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t reports_j_1_max__ = t;
            for (size_t j_1__ = 0; j_1__ < reports_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "reports" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t day_of_week_eff_j_1_max__ = 7;
            for (size_t j_1__ = 0; j_1__ < day_of_week_eff_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "day_of_week_eff" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t branch_reports_j_1_max__ = (logical_gt(estimate_r, 0) ? rt : 0 );
            for (size_t j_1__ = 0; j_1__ < branch_reports_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "branch_reports" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t R_j_1_max__ = (logical_gt(estimate_r, 0) ? rt : 0 );
            for (size_t j_1__ = 0; j_1__ < R_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "R" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t imputed_infections_k_0_max__ = t;
        for (size_t k_0__ = 0; k_0__ < imputed_infections_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "imputed_infections" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t r_k_0_max__ = (logical_gt(estimate_r, 0) ? rt : 0 );
        for (size_t k_0__ = 0; k_0__ < r_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "r" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t day_of_week_eff_raw_j_1_max__ = (7 - 1);
        for (size_t j_1__ = 0; j_1__ < day_of_week_eff_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "day_of_week_eff_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "inc_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "inc_sd";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rep_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rep_sd";
        param_names__.push_back(param_name_stream__.str());
        size_t rep_phi_k_0_max__ = model_type;
        for (size_t k_0__ = 0; k_0__ < rep_phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rep_phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        size_t eta_j_1_max__ = t;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t initial_R_j_1_max__ = estimate_r;
        for (size_t j_1__ = 0; j_1__ < initial_R_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "initial_R" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gt_mean_k_0_max__ = estimate_r;
        for (size_t k_0__ = 0; k_0__ < gt_mean_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gt_mean" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gt_sd_k_0_max__ = estimate_r;
        for (size_t k_0__ = 0; k_0__ < gt_sd_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gt_sd" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t inf_phi_k_0_max__ = (model_type * estimate_r);
        for (size_t k_0__ = 0; k_0__ < inf_phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "inf_phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t R_rho_k_0_max__ = estimate_r;
        for (size_t k_0__ = 0; k_0__ < R_rho_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "R_rho" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t R_alpha_k_0_max__ = estimate_r;
        for (size_t k_0__ = 0; k_0__ < R_alpha_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "R_alpha" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t R_eta_j_1_max__ = (logical_gt(estimate_r, 0) ? rt : 0 );
        for (size_t j_1__ = 0; j_1__ < R_eta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "R_eta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t noise_j_1_max__ = t;
            for (size_t j_1__ = 0; j_1__ < noise_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "noise" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t infections_j_1_max__ = t;
            for (size_t j_1__ = 0; j_1__ < infections_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "infections" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t reports_j_1_max__ = t;
            for (size_t j_1__ = 0; j_1__ < reports_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "reports" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t day_of_week_eff_j_1_max__ = 7;
            for (size_t j_1__ = 0; j_1__ < day_of_week_eff_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "day_of_week_eff" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t branch_reports_j_1_max__ = (logical_gt(estimate_r, 0) ? rt : 0 );
            for (size_t j_1__ = 0; j_1__ < branch_reports_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "branch_reports" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t R_j_1_max__ = (logical_gt(estimate_r, 0) ? rt : 0 );
            for (size_t j_1__ = 0; j_1__ < R_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "R" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t imputed_infections_k_0_max__ = t;
        for (size_t k_0__ = 0; k_0__ < imputed_infections_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "imputed_infections" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t r_k_0_max__ = (logical_gt(estimate_r, 0) ? rt : 0 );
        for (size_t k_0__ = 0; k_0__ < r_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "r" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_estimate_infections_namespace::model_estimate_infections stan_model;
#endif
